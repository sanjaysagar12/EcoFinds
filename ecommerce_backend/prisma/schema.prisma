// EcoFinds - Single user can buy AND sell products + Admin role
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  phone     String?   // Phone number
  password  String?   // For local auth
  googleId  String?   // For Google OAuth
  avatar    String?   
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  
  // Relations
  addresses       Address[] // User addresses
  productsForSale Product[] @relation("UserSellingProducts")  // Products they're SELLING
  orders          Order[]   @relation("UserBuyingProducts")   // Orders they're BUYING
  reviews         Review[]  // Reviews they've written
  cart            Cart?     // User's shopping cart
  
  @@index([email])
  @@index([role])
}

enum Role {
  USER   
  ADMIN
}

model Address {
  id        String   @id @default(cuid())
  street    String   // Street address
  city      String   // City
  state     String   // State/Province
  county    String?  // County (optional)
  pincode   String   // Postal/ZIP code
  country   String   @default("India") // Country
  isDefault Boolean  @default(false) // Is this the default address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@index([userId])
}

model Product {
  id          String      @id @default(cuid())
  title       String      // Product Title
  category    String      // Product Category (required now)
  description String      @db.Text // Product Description
  price       Decimal     @db.Decimal(10, 2) // Price
  
  // Basic Details
  quantity    Int         @default(1) // Quantity
  condition   String      // Condition (New, Used, Refurbished, etc.)
  yearOfManufacture Int?  // Year of Manufacture (optional)
  brand       String?     // Brand
  model       String?     // Model
  
  // Physical Properties
  dimensionLength  Float?  // Length in cm
  dimensionWidth   Float?  // Width in cm
  dimensionHeight  Float?  // Height in cm
  weight          Float?  // Weight in kg
  material        String? // Material
  color           String? // Color
  
  // Additional Info
  originalPackaging     Boolean @default(false) // Original Packaging
  manualIncluded        Boolean @default(false) // Manual/Instructions Included
  workingConditionDesc  String? @db.Text        // Working Condition Description
  
  // Images
  thumbnail   String?     // Main/featured image
  images      String[]    // Array of image URLs
  
  // System fields
  stock       Int         @default(0)  // Different from quantity - this is inventory
  isActive    Boolean     @default(true)
  isApproved  Boolean     @default(true)  // Admin can approve/reject products
  
  // WHO is selling this product
  seller      User        @relation("UserSellingProducts", fields: [sellerId], references: [id])
  sellerId    String
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]  // Items in cart
  
  @@index([sellerId])
  @@index([category])
  @@index([isActive])
  @@index([isApproved])
  @@index([condition])
  @@index([brand])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique @default(cuid())
  
  // WHO is buying these products
  buyer         User        @relation("UserBuyingProducts", fields: [buyerId], references: [id])
  buyerId       String
  
  items         OrderItem[]
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  shippingInfo  String?     // JSON string with address
  
  // Admin can intervene
  adminNotes    String?     // Admin can add notes to orders
  
  createdAt     DateTime    @default(now())
  deliveredAt   DateTime?
  
  reviews       Review[]
  
  @@index([buyerId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  ADMIN_HOLD    // Admin can put orders on hold
}

model OrderItem {
  id          String  @id @default(cuid())
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  
  productName String  // Snapshot
  price       Decimal @db.Decimal(10, 2)
  quantity    Int
  subtotal    Decimal @db.Decimal(10, 2)
  
  @@index([orderId])
}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  reviewer  User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  isHidden  Boolean  @default(false)  // Admin can hide inappropriate reviews
  createdAt DateTime @default(now())
  
  @@index([productId])
  @@index([isHidden])
  @@unique([reviewerId, productId]) // One review per user per product
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique // One cart per user
  items     CartItem[] // Cart items
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([cartId])
  @@index([productId])
  @@unique([cartId, productId]) // One item per product per cart
}

